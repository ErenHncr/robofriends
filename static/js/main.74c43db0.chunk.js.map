{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","robots.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","allrobots","username","Scroll","style","overflowY","border","height","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.74c43db0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id }) => {\r\n  return (\r\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow5 '>\r\n      <img src={`https://robohash.org/${id}?200x200`} alt='robots' />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user) => {\r\n          return (\r\n            <Card\r\n              key={user.id}\r\n              id={user.id}\r\n              name={user.name}\r\n              email={user.email}\r\n            />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: error })\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooops! That is not good</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n\r\nexport default ErrorBoundry;","const allrobots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n\nexport default allrobots;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid black', height: '800px' }}>\r\n      {props.children}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport allrobots from '../robots';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        this.setState({ robots: users })\r\n      });\r\n\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield } = this.state;\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes\r\n        (searchfield.toLowerCase())\r\n    })\r\n\r\n    if (!robots.length) {\r\n      this.setState({ robots: allrobots })\r\n    }\r\n    return (\r\n      <div className='tc' >\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    )\r\n\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}